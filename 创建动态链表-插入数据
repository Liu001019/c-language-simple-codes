#include<stdio.h>
#include<stdlib.h>
#define LEN sizeof(struct student)
struct student               //定义一个结构体数组student 
{
	int num;
	struct student *next;
};
int n;
struct student *creat(void)     //建立一个带头节点的单链表算法 
{
	struct student *head;
	struct student *p1,*p2;
	n=0;
	p1=p2=(struct student *)malloc(LEN);
	scanf("%d",&p1->num);
	head=NULL;
	while(p1->num!=0)
	{
		n++;
		if(n==1)head=p1;
		else p2->next=p1;
		p2=p1;
		p1=(struct student *)malloc(LEN);
		scanf("%d",&p1->num);
	}
	p2->next=NULL;      //最后一个节点的->next一定是NULL 
	return head;
}
void list_sort(struct student *p)
{
	int a[n];
	int i,j,k;
	struct student *l;
	for(i=0,l=p;i<n;i++,l=l->next)     //将链表中的各个节点的值赋一次赋给数组元素 
		a[i]=l->num;
	for(i=0;i<n;i++)
		for(j=0;j<n-i-1;j++)
		{
			if(a[j]>a[j+1])
				{
					k=a[j];
					a[j]=a[j+1];
					a[j+1]=k;
				}
		}
	for(i=0,l=p;i<n;i++,l=l->next) 
		l->num=a[i];
 } 
list_insert(struct student *p)       //定义一个插入数的的函数，同时不改变序列的递增性 
{
	struct student *l,*p1,*q;
	int c,i,b,j,k;
	int  a[n+1];
	printf("please input a number:");
	scanf("%d",&c);
	a[n]=c;
	printf("the insert num is: %d\n",c);
	for(i=0,l=p;i<n;i++,l=l->next)     //将链表中的各个节点的值赋一次赋给数组元素 
		a[i]=l->num;
	p1=(struct student *)malloc(LEN);
	l=p;
	 while(l!=NULL && c>l->num)
	 {
	 	l=l->next;
	 }
	 q=l->next;
	 l->next=p1;
	 p1->num=c;
	 p1->next=q;
 } 
void list_print(struct student *p)        //输出每个节点的num内容 
{
	do
	{
		printf("%d ",p->num);
		p=p->next;
	}while(p!=NULL);
	printf("\n");
}
int main()
{
	struct student *p,*x;
	p=creat();
	printf("the origial data:");
	list_print(p);
	list_sort(p);
	printf("the incress degrees:");
	list_print(p);
	list_insert(p);
	list_print(p);
}
